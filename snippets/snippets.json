{
    "Browser CRUD Scene": {
        "prefix": "ewfBrowserCRUDScene",
        "body": [
            "import { CRUDScene, CRUDSceneState, FlowStep, LandingSectionProps } from '../../../../Infrastructure/Frontend/commons/BrowserComponents';",
            "import { inject } from '../../../../Infrastructure/Frontend/commons/Core';",
            "$0",
            "export interface ${TM_FILENAME_BASE}Params {",
            "\t",
            "}",
            "",
            "export default class ${TM_FILENAME_BASE} extends CRUDScene<${1:Model}, ${2:Filter}, number, ${3:StoreParams}, ${TM_FILENAME_BASE}Params>",
            "{",
            "",
            "\t@inject",
            "\tcreateStateFromStores(store: ${4:Store}): CRUDSceneState<${1:Model}, ${2:Filter}, number, ${3:StoreParams}, ${TM_FILENAME_BASE}Params> {",
            "\t",
            "\t\treturn {",
            "\t\t\tcrudStoreState: store.getState(),",
            "\t\t\tparams: {",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "",
            "\tgetTitle(): string {",
            "\t\treturn \"Set your title here\";",
            "\t}",
            "",
            "\tgetTitleIcon(): string {",
            "\t\treturn \"Set you icon name here\"; ",
            "\t}",
            "",
            "\tlistComponentType() { ",
            "\t\treturn ${TM_FILENAME_BASE}List;",
            "\t}",
            "",
            "\tformComponentType(){ ",
            "\t\treturn ${TM_FILENAME_BASE}Form;",
            "\t}",
            "",
            "\tdetailsComponentType(){",
            "\t\treturn ${TM_FILENAME_BASE}Details;",
            "\t}",
            "",
            "\trenderStep(step: FlowStep): JSX.Element {",
            "\t\treturn super.renderStep(step);",
            "\t}",
            "",
            "\tprotected getLandingSection(): LandingSectionProps {",
            "\t\treturn null;",
            "\t}",
            "",
            "}"
        ],
        "description": "Creates a CRUD Scene boilerplate for a browser feature"
    },
    "Browser CRUD List": {
        "prefix": "ewfBrowserCRUDList",
        "body": [
            "import { Row, Col, CRUDList } from '../../../../Infrastructure/Frontend/commons/BrowserComponents';",
            "$0",
            "export default class ${TM_FILENAME_BASE} extends CRUDList<${1:Model}, ${2:Filter}, number>",
            "{",
            "\tgetSearchField() {",
            "\t\treturn 'Name';",
            "\t}",
            "\t",
            "\tgetKey(model: ${1:Model}) {",
            "\t\treturn model.Id;",
            "\t}",
            "\t",
            "\tgetDescription(model: ${1:Model}) {",
            "\t\treturn model.Name;",
            "\t}",
            "\t",
            "\trenderItem(model: ${1:Model}) {",
            "\t\treturn (",
            "\t\t\t<Row>",
            "\t\t\t\t<Col lg={12} md={12} sm={12} xs={12}>",
            "\t\t\t\t\t{`${model.Name}`}",
            "\t\t\t\t</Col>",
            "\t\t\t</Row>",
            "\t\t)",
            "\t}",
            "\t",
            "\trenderFilter() {",
            "\t\treturn (",
            "\t\t\t<${2:FilterForm}",
            "\t\t\ttoken={'${3:-filter}'}",
            "\t\t\tmodel={this.props.list.filter}",
            "\t\t\tok={model => this.onSaveFilter(model)} />",
            "\t\t)",
            "\t}",
            "\t",
            "\tonSaveFilter(model: ${2:Filter}) {",
            "\t\tthis.setFilter(filter => {",
            "\t\t\tfilter.Name = model.Name;",
            "\t\t\tfilter.Archived = model.Archived;",
            "\t\t}, true);",
            "\t}",
            "}"
        ],
        "description": "Creates a CRUD List boilerplate for a browser feature"
    },
    "Browser Transaction Form": {
        "prefix": "ewfBrowserTransactionForm",
        "body": [
            "import { Row, Col, TransactionForm, TransactionFormProps } from '../../../../Infrastructure/Frontend/commons/BrowserComponents';",
            "$0",
            "export interface ${TM_FILENAME_BASE}Params {",
            "}",
            "",
            "export default class ${TM_FILENAME_BASE} extends TransactionForm<${1:Model}, ${TM_FILENAME_BASE}Params>",
            "{",
            "\tprotected createModelValidator() {",
            "\t\treturn new ${2:Validator}();",
            "\t}",
            "",
            "\tprotected createDefaultModel(props: TransactionFormProps<${1:Model}, ${TM_FILENAME_BASE}Params>): ${1:Model} {",
            "\t\treturn {",
            "\t\t\tId: 0,",
            "\t\t\tName: null,",
            "\t\t\tArchivedBy: null,",
            "\t\t\tArchivedAt: null",
            "\t\t};",
            "\t}",
            "",
            "\tprotected getPropsServiceValidator(): string[] {",
            "\t\treturn [this.getPropName(x => x.Code)];",
            "\t}",
            "",
            "\trenderFormBody() {",
            "\t\treturn (",
            "\t\t\t<React.Fragment>",
            "\t\t\t\t<Row>",
            "\t\t\t\t\t<Col className='sm-rp' lg={6} md={6} sm={6} xs={6}>",
            "\t\t\t\t\t\t{this.renderStringInput('Name', x => x.Name)}",
            "\t\t\t\t\t</Col>",
            "\t\t\t\t\t<Col className='sm-lp' lg={6} md={6} sm={6} xs={6}>",
            "\t\t\t\t\t\t{this.renderStringInput('Description', x => x.Description)}",
            "\t\t\t\t\t</Col>",
            "\t\t\t\t</Row>",
            "\t\t\t</React.Fragment>",
            "\t\t)",
            "\t}",
            "}"
        ],
        "description": "Creates a CRUD Form boilerplate for a browser feature"
    },
    "Browser Filter Form": {
        "prefix": "ewfBrowserFilterForm",
        "body": [
            "import { Row, Col, FilterForm, FilterFormProps } from '../../../../Infrastructure/Frontend/commons/BrowserComponents';",
            "import cmMessages from '../../../../Infrastructure/Frontend/commons/i18n/Messages';",
            "import messages from '../../i18n/Messages';",
            "$0",
            "export default class ${TM_FILENAME_BASE} extends FilterForm<${1:Filter}, any>",
            "{",
            "\tprotected createDefaultModel(props: FilterFormProps<${1:Filter}, any>): ${1:Filter} {",
            "\t\treturn {",
            "\t\t\tName: null,",
            "\t\t};",
            "\t}",
            "",
            "\trenderFormBody() {",
            "\t\treturn (",
            "\t\t\t<Row>",
            "\t\t\t\t<Col lg={12} md={12} sm={12} xs={12}>",
            "\t\t\t\t\t{this.renderStringInput('Name', x => x.Name)}",
            "\t\t\t\t\t{this.renderObjectSelect(__translate(cmMessages.cm.archivingStatus), x => x.Archived, [false, true], x => `${x}`, x => x ? __translate(cmMessages.cm.archived) : __translate(cmMessages.cm.notArchived), true)}",
            "\t\t\t\t</Col>",
            "\t\t\t</Row>",
            "\t\t);",
            "\t}",
            "}"
        ],
        "description": "Creates a FilterForm boilerplate for a browser feature"
    },
    "Browser Standard Landing Section Method": {
        "prefix": "ewfBrowserLandingSectionMethod",
        "body": [
            "\tgetLandingSection(): LandingSectionProps",
            "\t{",
            "\t\treturn {",
            "\t\t\tformatClass: BasicLandingSectionFormatter,",
            "\t\t\tparams : {",
            "\t\t\t\ticon : `icon ${this.getTitleIcon()}`,",
            "\t\t\t\tdescription: $0 Title,",
            "\t\t\t\tactionText: Subtitle,",
            "\t\t\t}",
            "\t\t}",
            "\t}"
        ],
        "description": "Adds the Standard Landing Section Method for a browser feature. It should be used in the feature Scene"
    },
    "Mobile CRUD List": {
        "prefix": "ewfMobileCRUDList",
        "body": [
            "import { inject } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import { CRUDList, CRUDListState } from '../../../../Infrastructure/Frontend/commons/MobileComponents';",
            "$0",
            "export default class ${TM_FILENAME_BASE} extends CRUDList<${1:Model}, ${2:Filter}, number>",
            "{",
            "\t@inject",
            "\tcreateStateFromStores(store : ${1:Model}Store}): CRUDListState<${1:Model}, ${2:Filter}, number> {",
            "\t\treturn {",
            "\t\t\tlist: store.getState().list,",
            "\t\t\tdetails: store.getState().details,",
            "\t\t\tid: store.getState().id,",
            "\t\t\tshowFilter: store.getState().showFilter",
            "\t\t}",
            "\t}",
            "",
            "\tgetDescription(model: ${1:Model}): string {",
            "\t\treturn model.${4:Name}",
            "\t}",
            "",
            "\tgetTitle(){",
            "\t\treturn '${5:Title}';",
            "\t}",
            "",
            "\tgetSearchField(){",
            "\t\treturn null;",
            "\t}",
            "",
            "\tgetFilterFormPath(){",
            "\t\treturn '${6:-filter-form}';",
            "\t}",
            "",
            "\tgetDetailsPath(){",
            "\t\treturn '${7:-details}'",
            "\t}",
            "",
            "\tgetFormPath(){",
            "\t\treturn '${8:-form}';",
            "\t} ",
            "",
            "}"
        ],
        "description": "Creates a CRUD List boilerplate for a mobile feature. It works as the feature entrypoint scene"
    },
    "Mobile CRUD Details": {
        "prefix": "ewfMobileCRUDDetails",
        "body": [
            "import * as React from 'react';",
            "import { inject } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import { CRUDDetails, CRUDDetailsState } from '../../../../Infrastructure/Frontend/commons/MobileComponents';",
            "",
            "export default class ${TM_FILENAME_BASE} extends CRUDDetails<${1:Model}, any>",
            "{",
            "\t@inject",
            "\tcreateStateFromStores(store : ${1:Model}Store ) : CRUDDetailsState<${1:Model}, any> {",
            "\t\treturn {",
            "\t\t\tmodel : store.getState().details,",
            "\t\t\tparams : {}",
            "\t\t}",
            "\t}",
            "",
            "\trenderDetails(){",
            "\t\treturn (<React.Fragment>{this.renderString('$0Label here', x => x.Name)}</React.Fragment>)",
            "\t}",
            "",
            "}"
        ],
        "description": "Creates a CRUD Form boilerplate for a mobile feature. It includes an scene that loads the form"
    },
    "Mobile CRUD Form": {
        "prefix": "ewfMobileCRUDForm",
        "body": [
            "import { Col, Row } from 'native-base';",
            "import * as React from 'react';",
            "import { inject } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import { TransactionForm, TransactionFormProps, CRUDForm, CRUDFormState } from '../../../../Infrastructure/Frontend/commons/MobileComponents';",
            "$0",
            "export interface ${TM_FILENAME_BASE}Params {",
            "}",
            "",
            "export class ${TM_FILENAME_BASE} extends TransactionForm<${1:Model}, ${TM_FILENAME_BASE}Params>",
            "{",
            "\tprotected createDefaultModel(props: TransactionFormProps<${1:Model}, ${TM_FILENAME_BASE}Params>): ${1:Model} {",
            "\t\treturn {",
            "\t\t\tId: null,",
            "\t\t\tName: null,",
            "\t\t\tArchivedAt: null,",
            "\t\t\tArchivedBy: null,",
            "\t\t}",
            "\t}",
            "",
            "\tprotected createModelValidator() {",
            "\t\treturn new ${1:Model}Validator()",
            "\t}",
            "",
            "\tprotected getPropsServiceValidator(): string[] {",
            "\t\treturn [this.getPropName(x => x.Code)];",
            "\t}",
            "",
            "\trenderFormBody() {",
            "\t\treturn (",
            "\t\t\t<React.Fragment>{this.renderStringInput('Label name here', x => x.Name)}</React.Fragment>",
            "\t\t)",
            "\t}",
            "",
            "}",
            "",
            "export default class ${TM_FILENAME_BASE}Scene extends CRUDForm<${1:Model}, ${TM_FILENAME_BASE}Params>",
            "{",
            "",
            "\t@inject",
            "\tcreateStateFromStores(store: ${1:Model}Store): CRUDFormState<${1:Model}, ${TM_FILENAME_BASE}Params> {",
            "\t\treturn {",
            "\t\t\tmodel: store.getState().details,",
            "\t\t\ttransaction: store.getState().transaction,",
            "\t\t\tvalidationResult : store.getState().validationResult,",
            "\t\t\tparams: { }",
            "\t\t}",
            "\t}",
            "",
            "\tformComponent() {",
            "\t\treturn ${TM_FILENAME_BASE};",
            "\t}",
            "",
            "\tgetDetailsPath(): string {",
            "\t\treturn '${3:-details}';",
            "\t}",
            "",
            "}"
        ],
        "description": "Creates a CRUD Form boilerplate for a mobile feature. It includes an scene that loads the form"
    },
    "Mobile CRUD Filter Form": {
        "prefix": "ewfMobileCRUDFilterForm",
        "body": [
            "import { View } from 'native-base';",
            "import * as React from 'react';",
            "import { inject } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import commonMessages from '../../../../Infrastructure/Frontend/commons/i18n/Messages';",
            "import { CRUDFilter, CRUDFilterState, FilterForm, FilterFormProps } from '../../../../Infrastructure/Frontend/commons/MobileComponents';",
            "$0",
            "export interface ${TM_FILENAME_BASE}Params{",
            "}",
            "",
            "export class ${TM_FILENAME_BASE} extends FilterForm<${1:Filter}, ${TM_FILENAME_BASE}Params>",
            "{",
            "\tprotected createDefaultModel(props: FilterFormProps<${1:Filter}, ${TM_FILENAME_BASE}Params>): ${1:Filter} {",
            "\t\treturn {",
            "\t\t\tArchived: false",
            "\t\t};",
            "\t}",
            "",
            "\trenderFormBody() {",
            "\t\treturn (",
            "\t\t\t<React.Fragment>",
            "\t\t\t\t{",
            "\t\t\t\t\tthis.renderObjectSelect(__translate(commonMessages.cm.archivingStatus), model => model.Archived, [false, true], x => `${x}`,",
            "\t\t\t\t\t\tx => x ? __translate(commonMessages.cm.archived) : __translate(commonMessages.cm.notArchived), true)",
            "\t\t\t\t}",
            "\t\t\t</React.Fragment>",
            "\t\t)",
            "\t}",
            "",
            "}",
            "",
            "export default class ${TM_FILENAME_BASE}Scene extends CRUDFilter<${1:Filter}, ${TM_FILENAME_BASE}Params>",
            "{",
            "\t@inject",
            "\tcreateStateFromStores(store: ${1:Model}Store): CRUDFilterState<${1:Filter}, ${TM_FILENAME_BASE}Params> {",
            "\t\treturn { filter: store.getState().list.filter };",
            "\t}",
            "",
            "\tgetTitle() {",
            "\t\treturn '${3:Title}';",
            "\t}",
            "",
            "\tfilterFormComponent() {",
            "\t\treturn ${TM_FILENAME_BASE};",
            "\t}",
            "}"
        ],
        "description": "Creates a Filter Form boilerplate for a mobile feature. It includes an scene that loads the filter form"
    },
    "CRUD Store": {
        "prefix": "ewfCRUDStore",
        "body": [
            "import { injectable, getClassID } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import { TransactionStore } from '../../../../Infrastructure/Frontend/commons/Transactions';",
            "import * as Actions from '../Actions';",
            "import { CRUDStore, LazyValue, Queryable } from '../../../../Infrastructure/Frontend/commons/CRUD';",
            "$0",
            "export const default${2:Model}Filter: Queryable<${1:Filter}> = {",
            "\tName: '',",
            "\tArchived: false,",
            "\tRateType: null,",
            "\tTop: 50, Skip: 0, Count: false, vMax: 10000,",
            "\tSelect: null,",
            "\tOrderBy: 'Name'",
            "}",
            "",
            "export interface ${TM_FILENAME_BASE}Params",
            "{",
            "}",
            "",
            "@injectable",
            "export default class ${TM_FILENAME_BASE} extends CRUDStore<${2:Model}, ${1:Filter}, number, ${TM_FILENAME_BASE}Params>",
            "{",
            "\tconstructor(transactionStore: TransactionStore){ ",
            "\t\tsuper(getClassID(${TM_FILENAME_BASE}), transactionStore, default${2:Model}Filter,",
            "\t\t\t{",
            "\t\t\t});",
            "\t}",
            "",
            "\tgetCRUDActions(){ ",
            "\t\treturn {",
            "\t\t\tfilter: Actions.Filter${2:Model}Action,",
            "\t\t\ttoggleFilter: Actions.ToggleFilter${2:Model}Action,",
            "\t\t\tselect: Actions.Select${2:Model}Action,",
            "\t\t\tload: Actions.Load${2:Model}Action,",
            "\t\t\tsave: Actions.Save${2:Model}Action,",
            "\t\t\tcheckProp: Actions.Check${2:Model}Action,",
            "\t\t\tdel: Actions.Delete${2:Model}Action,",
            "\t\t\trecover: Actions.Recover${2:Model}Action",
            "\t\t};",
            "\t}",
            "}"
        ],
        "description": "Creates a CRUD Store given the model and the filter. It also links the default actions and creates the default filter object"
    },
    "CRUD Actions": {
        "prefix": "ewfCRUDActions",
        "body": [
            "import * as Rx from 'rx-lite';",
            "import { inject } from '../../../Infrastructure/Frontend/commons/Core';",
            "import { CheckPropAction, DeleteAction, FilterAction, LoadAction, RecoverAction, SaveAction, SelectAction, ToggleFilterAction } from '../../../Infrastructure/Frontend/commons/CRUD';",
            "import { TransactionType } from '../../../Infrastructure/Frontend/commons/Transactions';",
            "import ${1:Model}Service from './services/${1:Model}Service';",
            "",
            "export class Select${1:Model}Action extends SelectAction<number>",
            "{",
            "}",
            "export class ToggleFilter${1:Model}Action extends ToggleFilterAction",
            "{  ",
            "}",
            "export class Filter${1:Model}Action extends FilterAction<${1:Model}, ${2:Filter}>",
            "{",
            "\t@inject",
            "\tdoAsync(service: ${1:Model}Service): Rx.Observable<${1:Model}[]> {",
            "\t\treturn service.filter(this.getPayload());",
            "\t}",
            "}",
            "export class Save${1:Model}Action extends SaveAction<${1:Model}, number>",
            "{",
            "/t@inject",
            "/tdoAsync(service: ${1:Model}Service): Rx.Observable<{ Id: number, RowVersion?: number[] }>",
            "/t{",
            "/t/tvar pl = this.getPayload();",
            "/t/treturn pl.transaction.type == TransactionType.Add ? service.add(pl.model) : service.edit(pl.model);",
            "/t}",
            "}",
            "export class Delete${1:Model}Action extends DeleteAction<number>",
            "{",
            "/t@inject",
            "/tdoAsync(service: ${1:Model}Service): Rx.Observable<{ Id: number, RowVersion?: number[] }>",
            "/t{",
            "/t/treturn service.delete(this.getPayload());",
            "/t}",
            "}",
            "",
            "export class Recover${1:Model}Action extends RecoverAction<number>",
            "{",
            "/t@inject",
            "/tdoAsync(service: ${1:Model}Service): Rx.Observable<{ Id: number, RowVersion?: number[] }>",
            "/t{",
            "/t/treturn service.recover(this.getPayload());",
            "/t}",
            "}",
            "",
            "export class Load${1:Model}Action extends LoadAction<${1:Model}, number>",
            "{",
            "/t@inject",
            "/tdoAsync(service: ${1:Model}Service): Rx.Observable<${1:Model}> ",
            "/t{",
            "/t/treturn service.find(this.getPayload());",
            "/t}",
            "}",
            "",
            "export class Check${1:Model}Action extends CheckPropAction<${1:Model}>",
            "{",
            "/t@inject",
            "/tdoAsync(service: ${1:Model}Service) : Rx.Observable<{ isValid: boolean, code: string}>",
            "/t{",
            "/t/treturn service.check${1:Model}Code(this.getPayload().model.Id, this.getPayload().model.Code);",
            "/t}",
            "}"
        ],
        "description": "Creates all CRUD actions"
    },
    "CRUD Service": {
        "prefix": "ewfBasicCRUDService",
        "body": [
            "import { RestfulService, injectable } from '../../../../Infrastructure/Frontend/commons/Core';",
            "import { Queryable } from '../../../../Infrastructure/Frontend/commons/CRUD';",
            "import { ArchivedFilter, TimeOffTag } from '../../interop/SekureID.TimeOffManagement';",
            "",
            "@injectable",
            "export default class ${TM_FILENAME_BASE} extends RestfulService<${1:Model}, number, Queryable<${2:Filter}>>",
            "{",
            "\tconstructor()",
            "\t{",
            "\t\tsuper('/${3:end-point}');",
            "\t}",
            "",
            "\t_filter(filter: Queryable<${2:Filter}>)",
            "\t{",
            "\t\treturn this.createFilter(filter);",
            "\t}  ",
            "",
            "\trecover(id: number)",
            "\t{",
            "\t\treturn this.post<any, { Id: number, RowVersion?: number[] }>(`${this.url}/recover/${id}`, null);",
            "\t} ",
            "",
            "}"
        ],
        "description": "Creates a basic service to handle the CRUD actions"
    },

    "import Messages": {
        "prefix": "ewfMessages",
        "body": [
            "import messages from '../../i18n/Messages';",
            ""
        ]
    },
    "import Common Messages": {
        "prefix": "ewfCommonMessages",
        "body": [
            "import cmMessages from '../../../../Infrastructure/Frontend/commons/i18n/Messages';",
            ""
        ]
    },
    "import Config Messages": {
        "prefix": "ewfConfigMessages",
        "body": [
            "import cfgMessages from '../../../../Config/Frontend/commons/i18n/Messages';",
            ""
        ]
    }  
}